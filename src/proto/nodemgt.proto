// IMPORTANT: the node id is id or uid????
// coherenct between the definition here and the communication

// key range [key_start, key_end)
message MsgKeyRange {
  required int64 key_start = 1;
  required int64 key_end = 2;
  optional int32 node_id = 3;
}

message ReplicaList {
  required int32 replica_id = 1; // replica_id th backup 
  repeated MsgKeyRange msg_key_ranges =3;
}

message ReplicaTo {
  repeated ReplicaList replica_lists = 1;
}

message ReplicaNode{
  // required int32 node_id = 1;
  repeated int32 replica_ids = 2;
  repeated MsgKeyRange msg_key_ranges = 3;
}

message ReplicaFrom {
  repeated ReplicaNode replica_nodes = 1;
}

message FailedNode {
  // failed id is the uid
  required int32 failed_node_id = 1;
  // newid is the virtual id
  required int32 new_node_id = 2;
  required int32 replica_to_use = 3;
  // parameters used to initialize the process
  required int32 num_server = 4;
}


message NewNode {
  required string server_address = 1;
  required string cmd_address = 2;
  // here id is server id, not uid
  required MsgKeyRange range = 3;
  
}

message NodeManagementInfo {

  enum Command {
    SERVER_MSG_KEY_RANGE = 1;
    CLIENT_MSG_KEY_RANGE = 2;
    BACKUP_NODELIST = 3;
    NOTIFY_DEAD = 4;
    ACTIVATE_BACKUP = 5;
    ADD_NEW_NODE = 6;
    SERVER_PING = 7;
    SERVER_ACK = 8;
    PROCESS_EXECUTED = 9;
    BACKUP_LOADED = 10;
  }

  required Command command_id = 1;

  // command 1, master tell virtual node the key range it maintain
  optional MsgKeyRange msg_key_range = 2;
  
  // command 2, master tell client the key range of every virtual node 
  repeated MsgKeyRange msg_key_ranges = 3;

  // command 3, master tell virtual node its backup virutal nodelists
  optional ReplicaTo  replica_to = 4;
  optional ReplicaFrom replica_from = 5;

  // command 4, master tell virtual node that one virtual node dead
  // the node will remove the dead node from its list
  optional int32 failed_node_id = 6;

  // command 5, master tell the given server to load the backup
  optional FailedNode failed_node = 7;

  // // command 5 virutal node tell master that it fails to talk to a virutal node
  // optional int32 failed_to_talk_node = 7;

  // command 6, master tell client to add a new node to its list and then update the 
  // workload
  optional NewNode new_node = 8;

  // the unique id of the receiver, which could be a node, or a group of nodes
  // such as all clients nodes or all server nodes
  required int32 recver = 20;

  // the container identification
  // TODO: use an unique integer, which is cheaper than string
  optional string name = 21;

  // the unique id of the sender
  required int32 sender = 22;

}
