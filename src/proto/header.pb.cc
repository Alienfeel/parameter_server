// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/header.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/header.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_ApplyFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_ApplyFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_KeyFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_KeyFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_ValueFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_ValueFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_ReplicaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_ReplicaInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Header_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fheader_2eproto() {
  protobuf_AddDesc_proto_2fheader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/header.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, recver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, push_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, pull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, replica_info_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Header_ApplyFlag_descriptor_ = Header_descriptor_->nested_type(0);
  static const int Header_ApplyFlag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ApplyFlag, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ApplyFlag, vectors_),
  };
  Header_ApplyFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_ApplyFlag_descriptor_,
      Header_ApplyFlag::default_instance_,
      Header_ApplyFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ApplyFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ApplyFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_ApplyFlag));
  Header_KeyFlag_descriptor_ = Header_descriptor_->nested_type(1);
  static const int Header_KeyFlag_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_KeyFlag, empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_KeyFlag, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_KeyFlag, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_KeyFlag, cksum_),
  };
  Header_KeyFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_KeyFlag_descriptor_,
      Header_KeyFlag::default_instance_,
      Header_KeyFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_KeyFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_KeyFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_KeyFlag));
  Header_ValueFlag_descriptor_ = Header_descriptor_->nested_type(2);
  static const int Header_ValueFlag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ValueFlag, empty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ValueFlag, eps_),
  };
  Header_ValueFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_ValueFlag_descriptor_,
      Header_ValueFlag::default_instance_,
      Header_ValueFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ValueFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ValueFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_ValueFlag));
  Header_ReplicaInfo_descriptor_ = Header_descriptor_->nested_type(3);
  static const int Header_ReplicaInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ReplicaInfo, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ReplicaInfo, replica_id_),
  };
  Header_ReplicaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_ReplicaInfo_descriptor_,
      Header_ReplicaInfo::default_instance_,
      Header_ReplicaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ReplicaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header_ReplicaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header_ReplicaInfo));
  Header_Type_descriptor_ = Header_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fheader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_ApplyFlag_descriptor_, &Header_ApplyFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_KeyFlag_descriptor_, &Header_KeyFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_ValueFlag_descriptor_, &Header_ValueFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_ReplicaInfo_descriptor_, &Header_ReplicaInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fheader_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Header_ApplyFlag::default_instance_;
  delete Header_ApplyFlag_reflection_;
  delete Header_KeyFlag::default_instance_;
  delete Header_KeyFlag_reflection_;
  delete Header_ValueFlag::default_instance_;
  delete Header_ValueFlag_reflection_;
  delete Header_ReplicaInfo::default_instance_;
  delete Header_ReplicaInfo_reflection_;
}

void protobuf_AddDesc_proto_2fheader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_proto_2fnodemgt_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto/header.proto\032\023proto/nodemgt.prot"
    "o\"\342\004\n\006Header\022(\n\004type\030\001 \002(\0162\014.Header.Type"
    ":\014INVALID_TYPE\022\016\n\006sender\030\002 \002(\005\022\016\n\006recver"
    "\030\003 \002(\005\022\014\n\004name\030\004 \002(\t\022\014\n\004time\030\005 \001(\005\022\037\n\004pu"
    "sh\030\006 \001(\0132\021.Header.ApplyFlag\022\037\n\004pull\030\007 \001("
    "\0132\021.Header.ApplyFlag\022\034\n\003key\030\010 \001(\0132\017.Head"
    "er.KeyFlag\022 \n\005value\030\t \001(\0132\021.Header.Value"
    "Flag\022)\n\014replica_info\030\n \001(\0132\023.Header.Repl"
    "icaInfo\032/\n\tApplyFlag\022\r\n\005delta\030\001 \002(\010\022\023\n\007v"
    "ectors\030\002 \003(\005B\002\020\001\032C\n\007KeyFlag\022\r\n\005empty\030\001 \002"
    "(\010\022\r\n\005start\030\002 \002(\004\022\013\n\003end\030\003 \002(\004\022\r\n\005cksum\030"
    "\004 \002(\007\032\'\n\tValueFlag\022\r\n\005empty\030\001 \002(\010\022\013\n\003eps"
    "\030\002 \001(\001\0322\n\013ReplicaInfo\022\017\n\007node_id\030\001 \002(\005\022\022"
    "\n\nreplica_id\030\003 \002(\005\"r\n\004Type\022\020\n\014INVALID_TY"
    "PE\020\000\022\010\n\004PUSH\020\001\022\010\n\004PULL\020\002\022\r\n\tPUSH_PULL\020\003\022"
    "\t\n\005REPLY\020\004\022\r\n\tDUPLICATE\020\010\022\n\n\006BACKUP\020\020\022\017\n"
    "\013NODE_RESCUE\020 ", 654);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/header.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  Header_ApplyFlag::default_instance_ = new Header_ApplyFlag();
  Header_KeyFlag::default_instance_ = new Header_KeyFlag();
  Header_ValueFlag::default_instance_ = new Header_ValueFlag();
  Header_ReplicaInfo::default_instance_ = new Header_ReplicaInfo();
  Header::default_instance_->InitAsDefaultInstance();
  Header_ApplyFlag::default_instance_->InitAsDefaultInstance();
  Header_KeyFlag::default_instance_->InitAsDefaultInstance();
  Header_ValueFlag::default_instance_->InitAsDefaultInstance();
  Header_ReplicaInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fheader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fheader_2eproto {
  StaticDescriptorInitializer_proto_2fheader_2eproto() {
    protobuf_AddDesc_proto_2fheader_2eproto();
  }
} static_descriptor_initializer_proto_2fheader_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Header_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_Type_descriptor_;
}
bool Header_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Header_Type Header::INVALID_TYPE;
const Header_Type Header::PUSH;
const Header_Type Header::PULL;
const Header_Type Header::PUSH_PULL;
const Header_Type Header::REPLY;
const Header_Type Header::DUPLICATE;
const Header_Type Header::BACKUP;
const Header_Type Header::NODE_RESCUE;
const Header_Type Header::Type_MIN;
const Header_Type Header::Type_MAX;
const int Header::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Header_ApplyFlag::kDeltaFieldNumber;
const int Header_ApplyFlag::kVectorsFieldNumber;
#endif  // !_MSC_VER

Header_ApplyFlag::Header_ApplyFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_ApplyFlag::InitAsDefaultInstance() {
}

Header_ApplyFlag::Header_ApplyFlag(const Header_ApplyFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_ApplyFlag::SharedCtor() {
  _cached_size_ = 0;
  delta_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_ApplyFlag::~Header_ApplyFlag() {
  SharedDtor();
}

void Header_ApplyFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header_ApplyFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_ApplyFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_ApplyFlag_descriptor_;
}

const Header_ApplyFlag& Header_ApplyFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fheader_2eproto();
  return *default_instance_;
}

Header_ApplyFlag* Header_ApplyFlag::default_instance_ = NULL;

Header_ApplyFlag* Header_ApplyFlag::New() const {
  return new Header_ApplyFlag;
}

void Header_ApplyFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delta_ = false;
  }
  vectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_ApplyFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool delta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vectors;
        break;
      }

      // repeated int32 vectors = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vectors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_vectors())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_vectors())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_ApplyFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool delta = 1;
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->delta(), output);
  }

  // repeated int32 vectors = 2 [packed = true];
  if (this->vectors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vectors_cached_byte_size_);
  }
  for (int i = 0; i < this->vectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->vectors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_ApplyFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool delta = 1;
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->delta(), target);
  }

  // repeated int32 vectors = 2 [packed = true];
  if (this->vectors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vectors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->vectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->vectors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_ApplyFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool delta = 1;
    if (has_delta()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 vectors = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->vectors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->vectors(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vectors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_ApplyFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_ApplyFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_ApplyFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_ApplyFlag::MergeFrom(const Header_ApplyFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  vectors_.MergeFrom(from.vectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delta()) {
      set_delta(from.delta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_ApplyFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_ApplyFlag::CopyFrom(const Header_ApplyFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_ApplyFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Header_ApplyFlag::Swap(Header_ApplyFlag* other) {
  if (other != this) {
    std::swap(delta_, other->delta_);
    vectors_.Swap(&other->vectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_ApplyFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_ApplyFlag_descriptor_;
  metadata.reflection = Header_ApplyFlag_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header_KeyFlag::kEmptyFieldNumber;
const int Header_KeyFlag::kStartFieldNumber;
const int Header_KeyFlag::kEndFieldNumber;
const int Header_KeyFlag::kCksumFieldNumber;
#endif  // !_MSC_VER

Header_KeyFlag::Header_KeyFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_KeyFlag::InitAsDefaultInstance() {
}

Header_KeyFlag::Header_KeyFlag(const Header_KeyFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_KeyFlag::SharedCtor() {
  _cached_size_ = 0;
  empty_ = false;
  start_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  cksum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_KeyFlag::~Header_KeyFlag() {
  SharedDtor();
}

void Header_KeyFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header_KeyFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_KeyFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_KeyFlag_descriptor_;
}

const Header_KeyFlag& Header_KeyFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fheader_2eproto();
  return *default_instance_;
}

Header_KeyFlag* Header_KeyFlag::default_instance_ = NULL;

Header_KeyFlag* Header_KeyFlag::New() const {
  return new Header_KeyFlag;
}

void Header_KeyFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    empty_ = false;
    start_ = GOOGLE_ULONGLONG(0);
    end_ = GOOGLE_ULONGLONG(0);
    cksum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_KeyFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool empty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // required uint64 start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // required uint64 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_cksum;
        break;
      }

      // required fixed32 cksum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cksum_)));
          set_has_cksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_KeyFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool empty = 1;
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->empty(), output);
  }

  // required uint64 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->start(), output);
  }

  // required uint64 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end(), output);
  }

  // required fixed32 cksum = 4;
  if (has_cksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->cksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_KeyFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool empty = 1;
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->empty(), target);
  }

  // required uint64 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->start(), target);
  }

  // required uint64 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end(), target);
  }

  // required fixed32 cksum = 4;
  if (has_cksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->cksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_KeyFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool empty = 1;
    if (has_empty()) {
      total_size += 1 + 1;
    }

    // required uint64 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

    // required uint64 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }

    // required fixed32 cksum = 4;
    if (has_cksum()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_KeyFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_KeyFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_KeyFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_KeyFlag::MergeFrom(const Header_KeyFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_empty()) {
      set_empty(from.empty());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_cksum()) {
      set_cksum(from.cksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_KeyFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_KeyFlag::CopyFrom(const Header_KeyFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_KeyFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Header_KeyFlag::Swap(Header_KeyFlag* other) {
  if (other != this) {
    std::swap(empty_, other->empty_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(cksum_, other->cksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_KeyFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_KeyFlag_descriptor_;
  metadata.reflection = Header_KeyFlag_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header_ValueFlag::kEmptyFieldNumber;
const int Header_ValueFlag::kEpsFieldNumber;
#endif  // !_MSC_VER

Header_ValueFlag::Header_ValueFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_ValueFlag::InitAsDefaultInstance() {
}

Header_ValueFlag::Header_ValueFlag(const Header_ValueFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_ValueFlag::SharedCtor() {
  _cached_size_ = 0;
  empty_ = false;
  eps_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_ValueFlag::~Header_ValueFlag() {
  SharedDtor();
}

void Header_ValueFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header_ValueFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_ValueFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_ValueFlag_descriptor_;
}

const Header_ValueFlag& Header_ValueFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fheader_2eproto();
  return *default_instance_;
}

Header_ValueFlag* Header_ValueFlag::default_instance_ = NULL;

Header_ValueFlag* Header_ValueFlag::New() const {
  return new Header_ValueFlag;
}

void Header_ValueFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    empty_ = false;
    eps_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_ValueFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool empty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_eps;
        break;
      }

      // optional double eps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_eps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_ValueFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool empty = 1;
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->empty(), output);
  }

  // optional double eps = 2;
  if (has_eps()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->eps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_ValueFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool empty = 1;
  if (has_empty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->empty(), target);
  }

  // optional double eps = 2;
  if (has_eps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->eps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_ValueFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool empty = 1;
    if (has_empty()) {
      total_size += 1 + 1;
    }

    // optional double eps = 2;
    if (has_eps()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_ValueFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_ValueFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_ValueFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_ValueFlag::MergeFrom(const Header_ValueFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_empty()) {
      set_empty(from.empty());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_ValueFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_ValueFlag::CopyFrom(const Header_ValueFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_ValueFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Header_ValueFlag::Swap(Header_ValueFlag* other) {
  if (other != this) {
    std::swap(empty_, other->empty_);
    std::swap(eps_, other->eps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_ValueFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_ValueFlag_descriptor_;
  metadata.reflection = Header_ValueFlag_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header_ReplicaInfo::kNodeIdFieldNumber;
const int Header_ReplicaInfo::kReplicaIdFieldNumber;
#endif  // !_MSC_VER

Header_ReplicaInfo::Header_ReplicaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header_ReplicaInfo::InitAsDefaultInstance() {
}

Header_ReplicaInfo::Header_ReplicaInfo(const Header_ReplicaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header_ReplicaInfo::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  replica_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header_ReplicaInfo::~Header_ReplicaInfo() {
  SharedDtor();
}

void Header_ReplicaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Header_ReplicaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header_ReplicaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_ReplicaInfo_descriptor_;
}

const Header_ReplicaInfo& Header_ReplicaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fheader_2eproto();
  return *default_instance_;
}

Header_ReplicaInfo* Header_ReplicaInfo::default_instance_ = NULL;

Header_ReplicaInfo* Header_ReplicaInfo::New() const {
  return new Header_ReplicaInfo;
}

void Header_ReplicaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_id_ = 0;
    replica_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header_ReplicaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replica_id;
        break;
      }

      // required int32 replica_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replica_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_id_)));
          set_has_replica_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header_ReplicaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // required int32 replica_id = 3;
  if (has_replica_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replica_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header_ReplicaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // required int32 replica_id = 3;
  if (has_replica_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->replica_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header_ReplicaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // required int32 replica_id = 3;
    if (has_replica_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replica_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header_ReplicaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header_ReplicaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header_ReplicaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header_ReplicaInfo::MergeFrom(const Header_ReplicaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_replica_id()) {
      set_replica_id(from.replica_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header_ReplicaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header_ReplicaInfo::CopyFrom(const Header_ReplicaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_ReplicaInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Header_ReplicaInfo::Swap(Header_ReplicaInfo* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(replica_id_, other->replica_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header_ReplicaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_ReplicaInfo_descriptor_;
  metadata.reflection = Header_ReplicaInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Header::kTypeFieldNumber;
const int Header::kSenderFieldNumber;
const int Header::kRecverFieldNumber;
const int Header::kNameFieldNumber;
const int Header::kTimeFieldNumber;
const int Header::kPushFieldNumber;
const int Header::kPullFieldNumber;
const int Header::kKeyFieldNumber;
const int Header::kValueFieldNumber;
const int Header::kReplicaInfoFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
  push_ = const_cast< ::Header_ApplyFlag*>(&::Header_ApplyFlag::default_instance());
  pull_ = const_cast< ::Header_ApplyFlag*>(&::Header_ApplyFlag::default_instance());
  key_ = const_cast< ::Header_KeyFlag*>(&::Header_KeyFlag::default_instance());
  value_ = const_cast< ::Header_ValueFlag*>(&::Header_ValueFlag::default_instance());
  replica_info_ = const_cast< ::Header_ReplicaInfo*>(&::Header_ReplicaInfo::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  sender_ = 0;
  recver_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  push_ = NULL;
  pull_ = NULL;
  key_ = NULL;
  value_ = NULL;
  replica_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete push_;
    delete pull_;
    delete key_;
    delete value_;
    delete replica_info_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fheader_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    sender_ = 0;
    recver_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = 0;
    if (has_push()) {
      if (push_ != NULL) push_->::Header_ApplyFlag::Clear();
    }
    if (has_pull()) {
      if (pull_ != NULL) pull_->::Header_ApplyFlag::Clear();
    }
    if (has_key()) {
      if (key_ != NULL) key_->::Header_KeyFlag::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_value()) {
      if (value_ != NULL) value_->::Header_ValueFlag::Clear();
    }
    if (has_replica_info()) {
      if (replica_info_ != NULL) replica_info_->::Header_ReplicaInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header.Type type = 1 [default = INVALID_TYPE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Header_Type_IsValid(value)) {
            set_type(static_cast< ::Header_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sender;
        break;
      }

      // required int32 sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_)));
          set_has_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recver;
        break;
      }

      // required int32 recver = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recver_)));
          set_has_recver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_push;
        break;
      }

      // optional .Header.ApplyFlag push = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_push:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_push()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pull;
        break;
      }

      // optional .Header.ApplyFlag pull = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pull:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pull()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_key;
        break;
      }

      // optional .Header.KeyFlag key = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_value;
        break;
      }

      // optional .Header.ValueFlag value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_replica_info;
        break;
      }

      // optional .Header.ReplicaInfo replica_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replica_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replica_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Header.Type type = 1 [default = INVALID_TYPE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sender(), output);
  }

  // required int32 recver = 3;
  if (has_recver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recver(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional .Header.ApplyFlag push = 6;
  if (has_push()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->push(), output);
  }

  // optional .Header.ApplyFlag pull = 7;
  if (has_pull()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pull(), output);
  }

  // optional .Header.KeyFlag key = 8;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->key(), output);
  }

  // optional .Header.ValueFlag value = 9;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->value(), output);
  }

  // optional .Header.ReplicaInfo replica_info = 10;
  if (has_replica_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->replica_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Header.Type type = 1 [default = INVALID_TYPE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 sender = 2;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sender(), target);
  }

  // required int32 recver = 3;
  if (has_recver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recver(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional .Header.ApplyFlag push = 6;
  if (has_push()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->push(), target);
  }

  // optional .Header.ApplyFlag pull = 7;
  if (has_pull()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pull(), target);
  }

  // optional .Header.KeyFlag key = 8;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->key(), target);
  }

  // optional .Header.ValueFlag value = 9;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->value(), target);
  }

  // optional .Header.ReplicaInfo replica_info = 10;
  if (has_replica_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->replica_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Header.Type type = 1 [default = INVALID_TYPE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sender());
    }

    // required int32 recver = 3;
    if (has_recver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recver());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional .Header.ApplyFlag push = 6;
    if (has_push()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->push());
    }

    // optional .Header.ApplyFlag pull = 7;
    if (has_pull()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pull());
    }

    // optional .Header.KeyFlag key = 8;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Header.ValueFlag value = 9;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

    // optional .Header.ReplicaInfo replica_info = 10;
    if (has_replica_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replica_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_recver()) {
      set_recver(from.recver());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_push()) {
      mutable_push()->::Header_ApplyFlag::MergeFrom(from.push());
    }
    if (from.has_pull()) {
      mutable_pull()->::Header_ApplyFlag::MergeFrom(from.pull());
    }
    if (from.has_key()) {
      mutable_key()->::Header_KeyFlag::MergeFrom(from.key());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value()) {
      mutable_value()->::Header_ValueFlag::MergeFrom(from.value());
    }
    if (from.has_replica_info()) {
      mutable_replica_info()->::Header_ReplicaInfo::MergeFrom(from.replica_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_push()) {
    if (!this->push().IsInitialized()) return false;
  }
  if (has_pull()) {
    if (!this->pull().IsInitialized()) return false;
  }
  if (has_key()) {
    if (!this->key().IsInitialized()) return false;
  }
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  if (has_replica_info()) {
    if (!this->replica_info().IsInitialized()) return false;
  }
  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sender_, other->sender_);
    std::swap(recver_, other->recver_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(push_, other->push_);
    std::swap(pull_, other->pull_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(replica_info_, other->replica_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
